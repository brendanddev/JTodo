# Kubernetes Deployment for JTodo
---

## 1. MySQL Deployment & Service

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: jtodo
        - name: MYSQL_USER
          value: jtodo
        - name: MYSQL_PASSWORD
          value: jtodo
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306


---

## 2. JTodo Application Deployment & Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jtodo-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jtodo-app
  template:
    metadata:
      labels:
        app: jtodo-app
    spec:
      containers:
      - name: jtodo-app
        image: subkamble/jtodo:latest # Replace with your image
        ports:
        - containerPort: 8080
        env:
        - name: DB_HOST
          value: mysql
        - name: DB_PORT
          value: "3306"
        - name: DB_NAME
          value: jtodo
        - name: DB_USER
          value: jtodo
        - name: DB_PASSWORD
          value: jtodo
---
apiVersion: v1
kind: Service
metadata:
  name: jtodo-service
spec:
  type: LoadBalancer
  selector:
    app: jtodo-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080


---

metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: jtodo
        - name: MYSQL_USER
          value: jtodo
        - name: MYSQL_PASSWORD
          value: jtodo
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306


---

## 2. JTodo Application Deployment & Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jtodo-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jtodo-app
  template:
    metadata:
      labels:
        app: jtodo-app
    spec:
      containers:
      - name: jtodo-app
        image: subkamble/jtodo:latest # Replace with your image
        ports:
        - containerPort: 8080
        env:
        - name: DB_HOST
          value: mysql
        - name: DB_PORT
          value: "3306"
        - name: DB_NAME
          value: jtodo
        - name: DB_USER
          value: jtodo
        - name: DB_PASSWORD
          value: jtodo
---
apiVersion: v1
kind: Service
metadata:
  name: jtodo-service
spec:
  type: LoadBalancer
  selector:
    app: jtodo-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
